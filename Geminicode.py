from flask import Flask, request, jsonify, render_template
import google.generativeai as genai
import os
from dotenv import load_dotenv

# Load environment variables (API key)
load_dotenv()
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
if not GOOGLE_API_KEY:
    raise ValueError("GOOGLE_API_KEY is missing.  Make sure to set it in your .env file.")

app = Flask(__name__, static_folder='static')

# Configure the Gemini API
genai.configure(api_key=GOOGLE_API_KEY)
#  Use the correct model name from the Gemini API documentation.  Assume it is "gemini-2.0-flash"
model = genai.GenerativeModel('gemini-2.0-flash')  

def get_gemini_response(prompt, history=None):
    """
    Sends a prompt to the Gemini API and returns the response.  Handles
    conversational context if provided.

    Args:
        prompt (str): The user's query or message.
        history (list, optional):  A list of previous turns in the conversation
            (dictionaries with "role" and "parts").  Defaults to None.

    Returns:
        str: The text generated by the Gemini API, or an error message.
    """
    try:
        if history:
            response = model.generate_content(
                contents=history + [{"role": "user", "parts": [prompt]}],
                generation_config=genai.GenerationConfig(
                    temperature=0.7,
                    max_output_tokens=2048,
                ),
            )
        else:
            response = model.generate_content(
                prompt,
                generation_config=genai.GenerationConfig(
                    temperature=0.7,
                    max_output_tokens=2048,
                ),
            )
        if response.text:
            return response.text
        else:
            return "Sorry, I couldn't get a response from the model."
    except Exception as e:
        print(f"Error calling Gemini API: {e}")
        return f"An error occurred: {e}"

@app.route('/')
def index():
    return render_template('GeminiChatting.html')

@app.route('/chat', methods=['POST'])
def chat():
    """
    Handles user messages sent from the frontend.  It receives the user's
    message and optionally the conversation history, sends it to the Gemini
    API, and returns the response.
    """
    try:
        data = request.get_json()
        user_message = data.get('message')
        chat_history = data.get('history', None)
        if not user_message:
            return jsonify({'error': 'Missing "message" in request'}), 400

        response_text = get_gemini_response(user_message, chat_history)
        return jsonify({'response': response_text})
    except Exception as e:
        print(f"Error in /chat endpoint: {e}")
        return jsonify({'error': f"Internal server error: {e}"}), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
